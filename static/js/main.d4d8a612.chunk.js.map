{"version":3,"sources":["Card.tsx","AnimeGrid.tsx","App.tsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","AnimeCard","props","classes","React","useState","expanded","setExpanded","Card","className","CardHeader","title","subheader","score","CardMedia","image","image_url","CardContent","Typography","variant","color","component","airing_start","CardActions","disableSpacing","IconButton","clsx","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","paragraph","synopsis","display","flexWrap","flexGrow","justifyContent","alignItems","overflow","backgroundColor","palette","background","paper","AnimeGrid","Grid","container","GridList","cellHeight","items","map","item","xs","sm","GridListTile","key","img","mal_id","App","state","error","isLoaded","axios","get","then","result","setState","data","anime","this","animeGridProps","message","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"ucAaMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,EACRC,WAAY,QAEdC,OAAQ,CACNC,UAAW,eACXC,WAAY,OACZC,WAAYV,EAAMW,YAAYC,OAAO,YAAa,CAChDC,SAAUb,EAAMW,YAAYE,SAASC,YAGzCC,WAAY,CACVP,UAAW,uBAKF,SAASQ,EAAUC,GAChC,IAAMC,EAAUpB,IAD4B,EAEZqB,IAAMC,UAAS,GAFH,mBAErCC,EAFqC,KAE3BC,EAF2B,KAQ5C,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAWN,EAAQhB,MACvB,kBAACuB,EAAA,EAAD,CACEC,MAAOT,EAAMS,MACbC,UAAW,UAAYV,EAAMW,QAE/B,kBAACC,EAAA,EAAD,CACEL,UAAWN,EAAQd,MACnB0B,MAAOb,EAAMc,UACbL,MAAOT,EAAMS,QAEf,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,KAA5D,mBACmBnB,EAAMoB,eAG3B,kBAACC,EAAA,EAAD,CAAaC,gBAAc,GACzB,kBAACC,EAAA,EAAD,CACEhB,UAAWiB,YAAKvB,EAAQX,OAAT,eACZW,EAAQH,WAAaM,IAExBqB,QAzBkB,WACxBpB,GAAaD,IAyBPsB,gBAAetB,EACfuB,aAAW,aAEX,kBAAC,IAAD,QAGJ,kBAACC,EAAA,EAAD,CAAUC,GAAIzB,EAAU0B,QAAQ,OAAOC,eAAa,GAClD,kBAAChB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYgB,WAAS,GAAEhC,EAAMiC,aChEvC,IAAMpD,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJiD,QAAS,OACTC,SAAU,OACVC,SAAU,EACVC,eAAgB,eAChBC,WAAY,SACZC,SAAU,SACVC,gBAAiBzD,EAAM0D,QAAQC,WAAWC,YAKjC,SAASC,EAAU5C,GAChC,IAAMC,EAAUpB,IAEhB,OACE,yBAAK0B,UAAWN,EAAQhB,MACtB,kBAAC4D,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACC,EAAA,EAAD,CAAUC,WAAY,QACnBhD,EAAMiD,MAAMC,KAAI,SAACC,GAAD,OACf,kBAACN,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAcC,IAAKJ,EAAKK,KACtB,kBAACzD,EAAD,CAAWwD,IAAKJ,EAAKM,OAAQhD,MAAO0C,EAAK1C,MAAOE,MAAOwC,EAAKxC,MAAOG,UAAWqC,EAAKrC,UAAWmB,SAAUkB,EAAKlB,SAAUb,aAAc+B,EAAK/B,uB,ICuB3IsC,E,4MA3CbC,MAAe,CACbC,MAAO,KACPC,UAAU,EACVZ,MAAO,I,kEAGY,IAAD,OAClBa,IAAMC,IAAI,+CAA+CC,MACvD,SAAAC,GACE,EAAKC,SAAS,CACZL,UAAU,EACVZ,MAAOgB,EAAOE,KAAKC,WAMvB,SAAAR,GACE,EAAKM,SAAS,CACZL,UAAU,EACVD,e,+BAME,IAAD,EACqBS,KAAKV,MAAzBC,EADD,EACCA,MAAOC,EADR,EACQA,SACTS,EAAiB,CACrBrB,MAAOoB,KAAKV,MAAMV,OAEpB,OAAIW,EACK,uCAAaA,EAAMW,SAChBV,EAIR,kBAACjB,EAAc0B,GAHV,+C,GAnCKpE,IAAMsE,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACL6B,QAAQ7B,MAAMA,EAAMW,c","file":"static/js/main.d4d8a612.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: 900,\n    },\n    media: {\n      height: 0,\n      paddingTop: '140%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n  }),\n);\n\nexport default function AnimeCard(props: any) {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        title={props.title}\n        subheader={\"Score: \" + props.score}\n      />\n      <CardMedia\n        className={classes.media}\n        image={props.image_url}\n        title={props.title}\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Started airing: {props.airing_start}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography paragraph>{props.synopsis}</Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}","import React from 'react';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport AnimeCard from './Card';\n\ntype Item = { img: string; cols: any; mal_id: number; title: string; score: number; image_url: string; synopsis: string; airing_start: string; }\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      flexGrow: 1,\n      justifyContent: 'space-evenly',\n      alignItems: 'center',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n);\n\nexport default function AnimeGrid(props: any) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container>\n        <GridList cellHeight={'auto'}>\n          {props.items.map((item: Item) => (\n            <Grid item xs={10} sm={2}>\n              <GridListTile key={item.img}>\n                <AnimeCard key={item.mal_id} title={item.title} score={item.score} image_url={item.image_url} synopsis={item.synopsis} airing_start={item.airing_start} />\n              </GridListTile>\n            </Grid>\n          ))}\n        </GridList>\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport AnimeGrid from './AnimeGrid';\n\ninterface Props {}\ninterface State {\n  error?: any,\n  isLoaded: Boolean,\n  items: Array<any>\n}\n\nclass App extends React.Component<Props, State> {\n  state: State = {\n    error: null,\n    isLoaded: false,\n    items: []\n  };\n\n  componentDidMount() {\n    axios.get(\"https://api.jikan.moe/v3/season/2020/summer\").then(\n      result => {\n        this.setState({\n          isLoaded: true,\n          items: result.data.anime\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n      );\n  }\n  \n  render() {\n    const { error, isLoaded } = this.state;\n    const animeGridProps = { // make sure all required component's inputs/Props keys&types match\n      items: this.state.items\n    }\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <AnimeGrid {...animeGridProps}/>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}